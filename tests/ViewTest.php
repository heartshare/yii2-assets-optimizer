<?php

namespace slinstj\AssetsOptimizer\tests;

use yii\web\AssetManager;
use slinstj\AssetsOptimizer\View;
use slinstj\AssetsOptimizer\tests\bundles;
use yii\helpers\FileHelper;
use Yii;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-30 at 17:45:03.
 */
class ViewTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->mockWebApplication();
        \Yii::setAlias('@webroot', __DIR__ . '/runtime/web');
        \Yii::setAlias('@web', '/runtime/web');
    }

    protected function tearDown()
    {
        parent::tearDown();
        FileHelper::removeDirectory(Yii::getAlias('@runtime/web/assets'));
    }

    public function testHtmlContainsRightReferencesForAssets()
    {
        $view = $this->mockView();
        bundles\BasicAsset::register($view);
        $content = $view->renderFile('@yaotests/views/index.php', ['data' => 'Hello World!']);

        $this->assertEquals(1
                , preg_match('#<link href="/runtime/web/yao/.*?\\.yao\\.css"#', $content)
                , 'Html view is not referencing the right optimized CSS file: ' . $content
        );
        $this->assertEquals(1
                , preg_match('#<script src="/runtime/web/yao/[0-9a-z]+\\.yao\\.js">#', $content)
                , 'Html view is not referencing the right optimized JS file: ' . $content
        );
    }

    public function testOptimizedFilesExistOnDefaultBasePathAndBaseUrl()
    {
        $view = $this->mockView();
        bundles\BasicAsset::register($view);
        $content = $view->renderFile('@yaotests/views/index.php', ['data' => 'Hello World!']);

        $cssUrl = $this->findHtmlTagFor('link', $content, 1);
        $cssPath = $this->getOptmizedPath($cssUrl);
        $this->assertFileExists($cssPath, "Expected file '$cssUrl' could not be found in '$cssPath'.");

        $jsUrl = $this->findHtmlTagFor('script', $content, 1);
        $jsPath = $this->getOptmizedPath($jsUrl);
        $this->assertFileExists($jsPath, "Expected file '$jsUrl' could not be found in '$jsPath'.");
    }

    public function testOptimizedFilesExistWhenBasePathAndBaseUrlWereChanged()
    {
        $view = $this->mockView([
            'publishPath' => '@webroot/my/path',
            'publishUrl' => '@web/my/path',
        ]);
        bundles\BasicAsset::register($view);
        $content = $view->renderFile('@yaotests/views/index.php', ['data' => 'Hello World!']);

        $cssUrl = $this->findHtmlTagFor('link', $content, 1);
        $cssPath = $this->getOptmizedPath($cssUrl);
        $this->assertFileExists($cssPath, "Expected file '$cssUrl' SHOULD be found in '$cssPath'.");

        $jsUrl = $this->findHtmlTagFor('script', $content, 1);
        $jsPath = $this->getOptmizedPath($jsUrl);
        $this->assertFileExists($jsPath, "Expected file '$jsUrl' SHOULD be found in '$jsPath'.");
    }

    public function testOptimizedFilesDoesNotExistWhenWrongConfig()
    {
        $view = $this->mockView([
            'publishPath' => '@webroot/other/path',
            'publishUrl' => '@webroot/xyz/path',
        ]);
        bundles\BasicAsset::register($view);
        $content = $view->renderFile('@yaotests/views/index.php', ['data' => 'Hello World!']);

        $cssUrl = $this->findHtmlTagFor('link', $content, 1);
        $cssPath = $this->getOptmizedPath($cssUrl);
        $this->assertFileNotExists($cssPath, "Expected file '$cssUrl' SHOULD NOT be found in '$cssPath'.");

        $jsUrl = $this->findHtmlTagFor('script', $content, 1);
        $jsPath = $this->getOptmizedPath($jsUrl);
        $this->assertFileNotExists($jsPath, "Expected file '$jsUrl' SHOULD NOT be found in '$jsPath'.");
    }

    /**
     * @return View
     */
    protected function mockView(array $config = [])
    {
        return new View(\yii\helpers\ArrayHelper::merge([
            'assetManager' => $this->mockAssetManager(),
        ], $config));
    }

    protected function mockAssetManager()
    {
        $assetDir = Yii::getAlias('@runtime/web/assets');
        if (!is_dir($assetDir)) {
            mkdir($assetDir, 0777, true);
        }

        return new AssetManager([
            'basePath' => $assetDir,
            'baseUrl' => '/assets',
        ]);
    }

    protected function findByRegex($regex, $content, $match = 1)
    {
        $matches = [];
        preg_match($regex, $content, $matches);
        return !isset($matches[$match]) ? $matches: $matches[$match];
    }

    protected function getOptmizedPath($subject, $prefix = '@webroot', $exclude = '@web')
    {
        return \Yii::getAlias($prefix) . str_replace(\Yii::getAlias($exclude), '', $subject);
    }

    protected function findHtmlTagFor($type, $content, $match)
    {
        $regex = [
            'link' => '#<link href="(.*?)" rel="stylesheet">#',
            'script' => '#<script src="(.*?)">#',
        ];
        return $this->findByRegex($regex[$type], $content, $match);
    }
}
